<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">

    <title>Relying Party Resiliency Platform</title>
    <meta name="description" content="Inspecting the behaviour of Relying Party software in extreme corner-cases">
    <meta name="author" content="Koen van Hove">

    <style>
        .content {
            max-width: 1024px;
            margin: auto;
        }

        .logos {
            text-align: center;
        }

        .tal-table {
            width: 100%;
        }
    </style>
</head>
<body>
<div class="content">
    <h1>Relying Party Resiliency Platform</h1>
    <p>
        The aim of this website is to experiment with RPKI repositories and certificate authorities,
        especially with the focus of causing unintended behaviour on relying party clients.
        I set up a couple of experiments to test relying party clients. You can test these scenarios too, by
        downloading one or more of the TALs below.
    </p>
    <p>
        Your session ID is <span><code><?= $uuid; ?></code></span>. Use this session ID to check what your
        relying party software is doing from the server's perspective by clicking the "View request data" link below.
        It will start working once the first request comes in. This ID is randomly generated, and changes
        everytime you visit the website. It is embedded in the TALs you download from this site, thus store it well.
    </p>
    <p>
        Do not use any of these TALs in production!
        They are meant to cause interesting behaviour, and might break your server. You have been warned.
    </p>
    <p id="ipv6">
        Running these TALs requires IPv6 support. Without IPv6 the hostname will not resolve.
        You can test whether IPv6 works by clicking <a target="_blank" href="https://test-ipv6.com/">here</a>.
    </p>
    <table border="1" class="tal-table">
        <thead>
        <tr>
            <th>Code</th>
            <th>Description</th>
            <th width="150px">Download</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>A</td>
            <td>This repository contains a certificate that points to a repository ad infinitum.</td>
            <td><a href="https://a-<?= $uuid; ?>.<?= DOMAIN; ?>/koenvh-A.tal">Download the TAL</a></td>
        </tr>
        <tr>
            <td>B</td>
            <td>This repository returns a 429 response with a 1 day (86400 seconds) Retry-After value as header.</td>
            <td><a href="https://b-<?= $uuid; ?>.<?= DOMAIN; ?>/koenvh-B.tal">Download the TAL</a></td>
        </tr>
        <tr>
            <td>C</td>
            <td>This repository returns a 302 response with a redirect that never stops redirecting, but does not loop.</td>
            <td><a href="https://c-<?= $uuid; ?>.<?= DOMAIN; ?>/koenvh-C.tal">Download the TAL</a></td>
        </tr>
        <tr>
            <td>D</td>
            <td>This repository returns a gzip bomb, which is not valid XML.</td>
            <td><a href="https://d-<?= $uuid; ?>.<?= DOMAIN; ?>/koenvh-D.tal">Download the TAL</a></td>
        </tr>
        <tr>
            <td>E</td>
            <td>This repository keeps the connection open for a day before a response is returned, but does keep drip feeding new bytes to keep the connection alive.</td>
            <td><a href="https://e-<?= $uuid; ?>.<?= DOMAIN; ?>/koenvh-E.tal">Download the TAL</a></td>
        </tr>
        <tr>
            <td>F</td>
            <td>This repository serves a broken ROA with only an ASCII NUL character.</td>
            <td><a href="https://f-<?= $uuid; ?>.<?= DOMAIN; ?>/koenvh-F.tal">Download the TAL</a></td>
        </tr>
        <tr>
            <td>G</td>
            <td>This repository serves a billion laughs attack.</td>
            <td><a href="https://g-<?= $uuid; ?>.<?= DOMAIN; ?>/koenvh-G.tal">Download the TAL</a></td>
        </tr>
        <tr>
            <td>H</td>
            <td>This repository is both wide and deep (every child has 9 children).</td>
            <td><a href="https://h-<?= $uuid; ?>.<?= DOMAIN; ?>/koenvh-H.tal">Download the TAL</a></td>
        </tr>
        <tr>
            <td>I</td>
            <td>This repository contains a ROA that does not meet the requirements of a ROA.</td>
            <td><a href="https://i-<?= $uuid; ?>.<?= DOMAIN; ?>/koenvh-I.tal">Download the TAL</a></td>
        </tr>
        <tr>
            <td>J</td>
            <td>This repository contains ~2200 ROAs for one prefix, all with a different ASN. (Generating all ROAs takes ~10 minutes)</td>
            <td><a href="https://j-<?= $uuid; ?>.<?= DOMAIN; ?>/koenvh-J.tal">Download the TAL</a></td>
        </tr>
        <tr>
            <td>K</td>
            <td>This repository contains one ROA for 2200 prefixes, all with the same ASN.</td>
            <td><a href="https://k-<?= $uuid; ?>.<?= DOMAIN; ?>/koenvh-K.tal">Download the TAL</a></td>
        </tr>
        <tr>
            <td>L</td>
            <td>This repository links to 100 GiB of random data.</td>
            <td><a href="https://l-<?= $uuid; ?>.<?= DOMAIN; ?>/koenvh-L.tal">Download the TAL</a></td>
        </tr>
        <tr>
            <td>M</td>
            <td>This tries an XXE attack on an attribute. This should not be possible, as XXE are not allowed in attributes.</td>
            <td><a href="https://m-<?= $uuid; ?>.<?= DOMAIN; ?>/koenvh-M.tal">Download the TAL</a></td>
        </tr>
        <tr>
            <td>N</td>
            <td>This contains valid data with a stupendously long path.</td>
            <td><a href="https://n-<?= $uuid; ?>.<?= DOMAIN; ?>/koenvh-N.tal">Download the TAL</a></td>
        </tr>
        <tr>
            <td>O</td>
            <td>This contains valid data with a path that attempts to write to a folder up from where it should.</td>
            <td><a href="https://o-<?= $uuid; ?>.<?= DOMAIN; ?>/koenvh-O.tal">Download the TAL</a></td>
        </tr>
        <tr>
            <td>P</td>
            <td>This is a valid repository, nothing special.</td>
            <td><a href="https://p-<?= $uuid; ?>.<?= DOMAIN; ?>/koenvh-P.tal">Download the TAL</a></td>
        </tr>
        <tr>
            <td>Q</td>
            <td>This contains a large ASPA object.</td>
            <td><a href="https://q-<?= $uuid; ?>.<?= DOMAIN; ?>/koenvh-Q.tal">Download the TAL</a></td>
        </tr>
        </tbody>
    </table>
    <h2>Expected behaviour</h2>
    <p>
        One may ask what the expected behaviour is &mdash; what a relying party should do.
        Since these experiments do not reflect anything someone would realistically do, I think it is easier to answer
        the question what should <em>not</em> happen. Basically, anything strange that the subtree does should
        not affect the result of any other subtree (that is not a subset of the subtree). In other words, If you run this
        together with the normal TALs from the five RIRs, the program should still finish with the correct results for
        the five RIRs within a reasonable time (before the heat death of the universe, or before Soldier of Orange stops
        playing, whichever comes sooner). Do note that these repositories do not necessarily adhere to the RFCs - that
        is partially intentional, and partially a consequence of how things are set up.
    </p>
    <p>
        <a href="/">New session ID</a> - <a href="data/<?= $uuid; ?>">View request data</a> - <a href="https://nlnetlabs.nl/people">Contact us</a>
    </p>
</div>
<script>
    fetch("https://ipv6.<?= DOMAIN; ?>/").then(() => {
        document.getElementById("ipv6").innerHTML =
            "<strong style='color: green'>It looks like your network supports IPv6.</strong> " +
            "Running these TALs requires IPv6 support. " +
            "Without IPv6 the hostname will not resolve.";
    }).catch(() => {
        document.getElementById("ipv6").innerHTML =
            "<strong style='color: red'>It looks like your network does not support IPv6!</strong> " +
            "Running these TALs requires IPv6 support. " +
            "Without IPv6 the hostname will not resolve.";
    });
</script>
</body>
</html>
